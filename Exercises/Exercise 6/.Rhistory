source("../../simple.R")
source("../../simple.R")
setwd("C:/Users/kevin/OneDrive/Desktop/STAT 443/Labs/Lab 6")
source("../../simple.R")
source("../simple.R")
source("../../simple.R")
knitr::opts_chunk$set(echo = TRUE)
#if you do not have the package, type install.packages("name_of_the_package")
library(knitr)
library(tseries)
source("../../simple.R")
knitr::opts_chunk$set(echo = TRUE)
source("../../simple.R")
source("../../simple_utils.R")
set.seed(1)
success_indicators = c(1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1)
weight = 1
logistic_regression = function() {
n = length(success_indicators)
xs = 1:n
intercept = simulate(Norm(0, 1))
slope = simulate(Norm(0, 1))
for (i in 1:n) {
prob = plogis(intercept + slope * xs[i])
observe(success_indicators[i], Bern(prob))
}
success = plogis(intercept + slope * (n + 1))
return(c(intercept, slope, success))
}
logistic_regression()
setwd("C:/Users/kevin/OneDrive/Desktop/STAT 443/Labs/Lab 6")
source("../../simple.R")
setwd("C:/Users/kevin/OneDrive/Desktop/STAT 447/Exercises/Exercise 6")
knitr::opts_chunk$set(echo = TRUE)
#if you do not have the package, type install.packages("name_of_the_package")
library(knitr)
library(tseries)
source("../../simple.R")
data = read.csv("vaccines.csv")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
knitr::opts_chunk$set(echo = TRUE)
#if you do not have the package, type install.packages("name_of_the_package")
library(knitr)
library(tseries)
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(data)) {
vaccine = data$trials[i]
arm = data$arms[i]
size = data$groupSizes[i]
cases = data$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
data = read.csv("vaccines.csv")
data$groupSizes = as.double(data$groupSizes) # needed due to bug in Binom code
# this is where your R code goes
set.seed(1)
prob = posterior(model, 10000)
simulate(BetaMP(0.1, 15))
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(data)) {
vaccine = data$trials[i]
arm = data$arms[i]
size = data$groupSizes[i]
cases = data$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
set.seed(1)
prob = posterior(model, 10000)
print(eff)
print(eff[["Moderna-NIH"]])
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
#model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(data)) {
vaccine = data$trials[i]
arm = data$arms[i]
size = data$groupSizes[i]
cases = data$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
#  return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
#}
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
print(eff)
print(eff[["Moderna-NIH"]])
print(eff[["Pfizer-BioNTech"]])
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(data)) {
vaccine = data$trials[i]
arm = data$arms[i]
size = data$groupSizes[i]
cases = data$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
print(eff)
print(eff[["Moderna-NIH"]])
print(eff[["Pfizer-BioNTech"]])
print(mu_e)
print(lambda_e)
print(mu_p)
print(lambda_p)
print(eff)
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(data)) {
vaccine = data$trials[i]
arm = data$arms[i]
size = data$groupSizes[i]
cases = data$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(vaccines)) {
vaccine = vaccines$trials[i]
arm = vaccines$arms[i]
size = vaccines$groupSizes[i]
cases = vaccines$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
vaccines = read.csv("vaccines.csv")
vaccines$groupSizes = as.double(vaccines$groupSizes) # needed due to bug in Binom code
# this is where your R code goes
set.seed(1)
prob = posterior(model, 10000)
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (vac in seq_along(vaccines)) {
vaccine = vac$trials
arm = vac$arms
size = vac$groupSizes
cases = vac$numbersOfCases
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
seq_along(vaccines)
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(vaccines)) {
vaccine = vaccines$trials[i]
arm = vaccines$arms[i]
size = vaccines$groupSizes[i]
cases = vaccines$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
source("../../simple.R")
BetaMP = function(mean, precision){
Beta(mean*precision, (1-mean)*precision)
}
model = function() {
mu_e = simulate(Unif(0,1))
lambda_e = simulate(Exp(0.01))
mu_p = simulate(BetaMP(0.1, 15))
lambda_p = simulate(Exp(0.01))
eff = list()
inc = list()
eff[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Pfizer-BioNTech"]] = simulate(BetaMP(mu_p, lambda_p))
eff[["Moderna-NIH"]] = simulate(BetaMP(mu_e, lambda_e))
inc[["Moderna-NIH"]] = simulate(BetaMP(mu_p, lambda_p))
for (i in seq_along(vaccines)) {
vaccine = vaccines$trials[i]
arm = vaccines$arms[i]
size = vaccines$groupSizes[i]
cases = vaccines$numbersOfCases[i]
if (arm == "control") {
observe(cases, Binom(size, inc[[vaccine]]))
} else {
observe(cases, Binom(size, inc[[vaccine]] * (1 - eff[[vaccine]])))
}
}
return(eff[["Moderna-NIH"]] > eff[["Pfizer-BioNTech"]])
}
# this is where your R code goes
vaccines = read.csv("vaccines.csv")
vaccines$groupSizes = as.double(vaccines$groupSizes) # needed due to bug in Binom code
# this is where your R code goes
set.seed(1)
prob = posterior(model, 10000)
# this is where your R code goes
set.seed(1)
prob = posterior(model, 100)
print(prob)
# this is where your R code goes
set.seed(1)
prob = posterior(model, 1000)
print(prob)
# this is where your R code goes
set.seed(1)
prob = posterior(model, 10000)
# this is where your R code goes
set.seed(1)
prob = posterior(model, 5000)
posterior(model, 10000)
# this is where your R code goes
set.seed(2)
prob = posterior(model, 10000)
print(prob)
library(mcmcse)
